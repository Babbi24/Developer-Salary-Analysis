{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "803dcb4e-8139-4b53-a1a0-40eea987f8e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-02 22:43:58.892 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Manoj Mishra\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-09-02 22:43:58.897 \n",
      "`st.cache` is deprecated and will be removed soon. Please use one of Streamlit's new caching commands, `st.cache_data` or `st.cache_resource`.\n",
      "More information [in our docs](https://docs.streamlit.io/develop/concepts/architecture/caching).\n",
      "\n",
      "**Note**: The behavior of `st.cache` was updated in Streamlit 1.36 to the new caching logic used by `st.cache_data` and `st.cache_resource`.\n",
      "This might lead to some problems or unexpected behavior in certain edge cases.\n",
      "\n",
      "2024-09-02 22:43:58.899 No runtime found, using MemoryCacheStorageManager\n",
      "2024-09-02 22:43:58.906 No runtime found, using MemoryCacheStorageManager\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def shorten_categories(categories, cutoff):\n",
    "    categorical_map = {}\n",
    "    for i in range(len(categories)):\n",
    "        if categories.values[i] >= cutoff:\n",
    "            categorical_map[categories.index[i]] = categories.index[i]\n",
    "        else:\n",
    "            categorical_map[categories.index[i]] = 'Other'\n",
    "    return categorical_map\n",
    "\n",
    "\n",
    "def clean_experience(x):\n",
    "    if x ==  'More than 50 years':\n",
    "        return 50\n",
    "    if x == 'Less than 1 year':\n",
    "        return 0.5\n",
    "    return float(x)\n",
    "\n",
    "\n",
    "def clean_education(x):\n",
    "    if 'Bachelor’s degree' in x:\n",
    "        return 'Bachelor’s degree'\n",
    "    if 'Master’s degree' in x:\n",
    "        return 'Master’s degree'\n",
    "    if 'Professional degree' in x or 'Other doctoral' in x:\n",
    "        return 'Post grad'\n",
    "    return 'Less than a Bachelors'\n",
    "\n",
    "\n",
    "@st.cache\n",
    "def load_data():\n",
    "    df = pd.read_csv(\"Developer Survey.csv\")\n",
    "    df = df[[\"Country\", \"EdLevel\", \"YearsCodePro\", \"Employment\", \"ConvertedCompYearly\"]]\n",
    "    df = df[df[\"ConvertedCompYearly\"].notnull()]\n",
    "    df = df.dropna()\n",
    "    df = df[df[\"Employment\"] == \"Employed full-time\"]\n",
    "    df = df.drop(\"Employment\", axis=1)\n",
    "\n",
    "    country_map = shorten_categories(df.Country.value_counts(), 400)\n",
    "    df[\"Country\"] = df[\"Country\"].map(country_map)\n",
    "    df = df[df[\"ConvertedCompYearly\"] <= 250000]\n",
    "    df = df[df[\"ConvertedCompYearly\"] >= 10000]\n",
    "    df = df[df[\"Country\"] != \"Other\"]\n",
    "\n",
    "    df[\"YearsCodePro\"] = df[\"YearsCodePro\"].apply(clean_experience)\n",
    "    df[\"EdLevel\"] = df[\"EdLevel\"].apply(clean_education)\n",
    "    df = df.rename({\"ConvertedCompYearly\": \"Salary\"}, axis=1)\n",
    "    return df\n",
    "\n",
    "df = load_data()\n",
    "\n",
    "def show_explore_page():\n",
    "    st.title(\"Explore Software Engineer Salaries\")\n",
    "\n",
    "    st.write(\n",
    "        \"\"\"\n",
    "    ### Stack Overflow Developer Survey 2021\n",
    "    \"\"\"\n",
    "    )\n",
    "\n",
    "    data = df[\"Country\"].value_counts()\n",
    "\n",
    "    fig1, ax1 = plt.subplots()\n",
    "    ax1.pie(data, labels=data.index, autopct=\"%1.1f%%\", shadow=True, startangle=90)\n",
    "    ax1.axis(\"equal\")  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "    st.write(\"\"\"#### Number of Data from different countries\"\"\")\n",
    "\n",
    "    st.pyplot(fig1)\n",
    "    \n",
    "    st.write(\n",
    "        \"\"\"\n",
    "    #### Mean Salary Based On Country\n",
    "    \"\"\"\n",
    "    )\n",
    "\n",
    "    data = df.groupby([\"Country\"])[\"Salary\"].mean().sort_values(ascending=True)\n",
    "    st.bar_chart(data)\n",
    "\n",
    "    st.write(\n",
    "        \"\"\"\n",
    "    #### Mean Salary Based On Experience\n",
    "    \"\"\"\n",
    "    )\n",
    "\n",
    "    data = df.groupby([\"YearsCodePro\"])[\"Salary\"].mean().sort_values(ascending=True)\n",
    "    st.line_chart(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e147dece-4f24-4cfd-b73d-ad879278027c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
